package com.borakay.tennisproadminapplicationnodesignchange.view.fragments

import android.app.ProgressDialog
import android.os.Bundle
import android.util.Log
import android.view.*
import android.view.View.GONE
import android.view.View.VISIBLE
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import com.borakay.tennisproadminapplicationnodesignchange.R
import com.borakay.tennisproadminapplicationnodesignchange.databinding.QrcodeCustomerOrderDetailFragmentBinding
import com.borakay.tennisproadminapplicationnodesignchange.model_pojoclass.ResendEmailData
import com.borakay.tennisproadminapplicationnodesignchange.model_pojoclass.ResendEmailData_Output
import com.borakay.tennisproadminapplicationnodesignchange.model_pojoclass.ShopTimingList_Pojo
import com.borakay.tennisproadminapplicationnodesignchange.retrofit.RetrofitClient
import com.borakay.tennisproadminapplicationnodesignchange.staticvaluesfolder.*
import com.borakay.tennisproadminapplicationnodesignchange.view.MainActivity
import com.borakay.tennisproadminapplicationnodesignchange.view.MainActivity.Companion.navController
import com.borakay.tennisproadminapplicationnodesignchange.view.fragments.QRcodeScanOrderDetailFragment.Companion.orderDetail
import com.borakay.tennisproadminapplicationnodesignchange.viewmodel.fragments.QRCodeCustomerOrderDetailViewModel
import com.squareup.picasso.Picasso
import kotlinx.android.synthetic.main.qrcode_customer_order_detail_fragment.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.DecimalFormat
import java.text.SimpleDateFormat
import java.util.*
import kotlin.concurrent.schedule

class QRCodeCustomerOrderDetailFragment : Fragment() {

    companion object {
        fun newInstance() = QRCodeCustomerOrderDetailFragment()
    }

    private lateinit var viewModel: QRCodeCustomerOrderDetailViewModel
    private var shopTimingList = arrayListOf<ShopTimingList_Pojo>()
    lateinit var progressDialog: ProgressDialog
    lateinit var stateChangeDialog: RacketStateChange_Dialog_Fragment
    lateinit var binding: QrcodeCustomerOrderDetailFragmentBinding

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return try {
            binding = QrcodeCustomerOrderDetailFragmentBinding.bind(
                inflater.inflate(
                    R.layout.qrcode_customer_order_detail_fragment,
                    container,
                    false
                )
            )

            binding.root
        } catch (e: Exception) {
            Log.d("TAG", "onCreateView: $e")
            null
        }
    }

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)

        try {
            viewModel = ViewModelProvider(this)[QRCodeCustomerOrderDetailViewModel::class.java]

            stateChangeDialog = RacketStateChange_Dialog_Fragment()
            stateChangeDialog.isCancelable = false

            MainActivity.activityMainBinding.tvMainActivityToolbarTitle.text =
                getString(R.string.order_detail_list)

            if (orderDetail?.OrderDetails?.OrderStatus == 7) {
                binding.ivOrderDetailOrderComplete.visibility = View.GONE
                binding.btnOrderDetailStringReminderEmail.visibility = View.GONE
                binding.btnOrderDetailStringCompleteOrder.visibility = View.VISIBLE
            } else {
                binding.ivOrderDetailOrderComplete.visibility = View.VISIBLE
                binding.btnOrderDetailStringCompleteOrder.visibility = View.GONE

                if (orderDetail?.OrderDetails?.OrderStatus == 8) {
                    if (orderDetail?.CustomerDetails?.EmailAddress != null)
                        binding.btnOrderDetailStringReminderEmail.visibility = View.VISIBLE
                }
            }

            var deliveryDateTime1 =
                if (orderDetail?.OrderDetails?.IsExpressDelivery == true) getString(
                    R.string.express_delivery
                ) else getString(R.string.delivery)

            var deliveryDateTime: String =
                if (orderDetail?.OrderDetails?.IsExpressDelivery == true) {
                    SimpleDateFormat("EEEE").format(
                        SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(
                            orderDetail?.OrderDetails?.DeliveryDate
                        )
                    ).uppercase(Locale.getDefault()).plus(", ").plus(
                        SimpleDateFormat("dd MMMM yyyy").format(
                            SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(
                                orderDetail?.OrderDetails?.DeliveryDate
                            )
                        )
                    ).plus(" ").plus(getString(R.string.at)).plus(" ").plus(
                        SimpleDateFormat("H").format(
                            SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(
                                orderDetail?.OrderDetails?.DeliveryDate
                            )
                        )
                    ).plus("h")
                } else {
                    SimpleDateFormat("EEEE").format(
                        SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(
                            orderDetail?.OrderDetails?.DeliveryDate
                        )
                    ).uppercase(Locale.getDefault()).plus(", ").plus(
                        SimpleDateFormat("dd MMMM yyyy").format(
                            SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(
                                orderDetail?.OrderDetails?.DeliveryDate
                            )
                        )
                    ).plus(" ").plus(getString(R.string.after)).plus(" ")
                        .plus(
                            SimpleDateFormat("H").format(
                                SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(
                                    orderDetail?.OrderDetails?.DeliveryDate
                                )
                            )
                        ).plus("h")
                }
            
            binding.tvOrderDetailDeliveryDetail.text =
                deliveryDateTime1.plus(": ").plus(deliveryDateTime)

            if (orderDetail?.OrderDetails?.OrderStatus == 9) {
                binding.ivOrderDetailOrderCompleteTag.visibility = VISIBLE
                binding.ivOrderDetailOrderComplete.visibility = View.GONE
            }

            binding.tvOrderDetailQrCodeDetail.text =
                requireContext().resources.getString(R.string.qr).plus(": ").plus(
                    orderDetail?.QRCodeDetails?.DecryptQRCode
                )

            if (orderDetail?.CustomerDetails?.Initial != 3)
                binding.tvOrderDetailCustomerName.text =
                    (if (orderDetail?.CustomerDetails?.Initial == 1) requireContext().resources.getString(
                        R.string.db_mr
                    ) else requireContext().resources.getString(
                        R.string.db_mrs
                    )).plus(" ").plus(orderDetail?.CustomerDetails?.Fname ?: "").plus(" ")
                        .plus(orderDetail?.CustomerDetails?.Lname)
            else
                binding.tvOrderDetailCustomerName.text =
                    orderDetail?.CustomerDetails?.CompanyName.plus(" ")
                        .plus(if (orderDetail?.CustomerDetails?.CompanyPersonName.isNullOrEmpty()) "" else " (" + orderDetail?.CustomerDetails?.CompanyPersonName + ")")

            if (orderDetail?.CustomerDetails?.EmailAddress != null)
                binding.tvOrderDetailCustomerEmail.text =
                    requireContext().resources.getString(R.string.email).plus(": ").plus(orderDetail?.CustomerDetails?.EmailAddress)

            if (orderDetail?.CustomerDetails?.PhoneNo != null && orderDetail?.CustomerDetails?.PhoneNo != "")
                binding.tvOrderDetailCustomerPhone.text =
                    requireContext().resources.getString(R.string.mobile_number).plus(" : ")
                        .plus(orderDetail?.CustomerDetails?.PhoneNo)
            else
                binding.tvOrderDetailCustomerPhone.visibility = GONE

            if (orderDetail?.RacketDetails?.RacketImage_1 == null || orderDetail?.RacketDetails?.RacketImage_1.isNullOrEmpty())
                Picasso.get().load(noImage)
                    .error(R.drawable.ic_add_image)
                    .resize(110, 110).centerInside().into(binding.ivOrderDetailRacketImage)
            else
                Picasso.get().load(orderDetail?.RacketDetails?.RacketImage_1)
                    .error(R.drawable.ic_add_image)
                    .resize(110, 110).centerInside().into(binding.ivOrderDetailRacketImage)

            binding.tvOrderDetailRacketMark.text = orderDetail?.RacketDetails?.Brand
            binding.tvOrderDetailRacketTitle.text =
                requireContext().resources.getString(R.string.racket_title) + " " + orderDetail?.RacketDetails?.Range + " " + orderDetail?.RacketDetails?.Modele + " " + (orderDetail?.RacketDetails?.Version
                    ?: "") + if (orderDetail?.RacketDetails?.Weight == null) "" else " (" + orderDetail?.RacketDetails?.Weight + " GR)"

            if (orderDetail?.RacketDetails?.SleeveSize.isNullOrEmpty()) binding.tvOrderDetailRacketSleeveSize.visibility =
                GONE 
            else
                binding.tvOrderDetailRacketSleeveSize.text =
                    requireContext().resources.getString(R.string.sleeve_size) + ": " + orderDetail?.RacketDetails?.SleeveSize

            if (orderDetail?.RacketDetails?.PurchaseYear.isNullOrEmpty()) binding.tvOrderDetailRacketYear.visibility =
                GONE 
            else
                binding.tvOrderDetailRacketYear.text =
                    requireContext().resources.getString(R.string.year) + ": " + orderDetail?.RacketDetails?.PurchaseYear

            when (orderDetail?.RacketDetails?.IsShopPurchased) {
                4 -> binding.tvOrderDetailStoreBought.text =
                    requireContext().resources.getString(R.string.store_bought) + ": " + requireContext().resources.getString(
                        R.string.yes
                    )
                5 -> binding.tvOrderDetailStoreBought.text =
                    requireContext().resources.getString(R.string.store_bought) + ": " + requireContext().resources.getString(
                        R.string.no
                    )
                6 -> binding.tvOrderDetailStoreBought.text =
                    requireContext().resources.getString(R.string.store_bought) + ": " + requireContext().resources.getString(
                        R.string.don_t_know
                    )
                else -> binding.tvOrderDetailStoreBought.visibility = View.GONE
            }

            if (orderDetail?.RacketDetails?.NewStatus.isNullOrEmpty()) {
                if (orderDetail?.RacketDetails?.Status.isNullOrEmpty()) {
                    binding.tvOrderDetailState.text =
                        requireContext().resources.getString(R.string.state) + ": "
                    binding.tvOrderDetailStateNotFound.visibility = VISIBLE
                } else
                    binding.tvOrderDetailState.text =
                        requireContext().resources.getString(R.string.state) + ": " + orderDetail?.RacketDetails?.Status
            } else
                binding.tvOrderDetailState.text =
                    requireContext().resources.getString(R.string.state) + ": " + orderDetail?.RacketDetails?.NewStatus

            if (!orderDetail?.StringDetails?.get(0)?.ImagePath_1.isNullOrEmpty())
                Picasso.get().load(orderDetail?.StringDetails?.get(0)?.ImagePath_1)
                    .error(R.drawable.ic_add_image)
                    .resize(110, 110).centerInside().into(binding.ivOrderDetailStringImage)
            else if (!orderDetail?.StringDetails?.get(0)?.String?.ImageUrl.isNullOrEmpty())
                Picasso.get().load(orderDetail?.StringDetails?.get(0)?.String?.ImageUrl)
                    .error(R.drawable.ic_add_image)
                    .resize(110, 110).centerInside().into(binding.ivOrderDetailStringImage)
            else if (!orderDetail?.StringDetails?.get(0)?.String?.BrandImageUrl.isNullOrEmpty())
                Picasso.get().load(orderDetail?.StringDetails?.get(0)?.String?.BrandImageUrl)
                    .error(R.drawable.ic_add_image)
                    .resize(110, 110).centerInside().into(binding.ivOrderDetailStringImage)
            else
                Picasso.get().load(noImage)
                    .error(R.drawable.ic_add_image)
                    .resize(110, 110).centerInside().into(binding.ivOrderDetailStringImage)

            binding.ivOrderDetailStringFinish.visibility =
                if (orderDetail?.StringDetails?.get(0)?.OriginalStringCount ?: 0.0 > 0) (if (orderDetail?.StringDetails?.get(
                        0
                    )?.StringFinished == true
                ) View.VISIBLE else View.GONE) else View.GONE

            if (orderDetail?.StringDetails?.get(0)?.IsPersonalString == true)
                binding.tvOrderDetailStringCordagePerso.visibility = VISIBLE
            else
                binding.tvOrderDetailStringCordagePerso.visibility = GONE

            binding.tvOrderDetailStringMark.text = orderDetail?.StringDetails?.get(0)?.String?.Brand
            binding.tvOrderDetailStringModel.text =
                (if (orderDetail?.StringDetails!![0].OriginalStringCount ?: 0.0 == 0.0) requireContext().resources.getString(
                    R.string.one_string_title
                ) else requireContext().resources.getString(R.string.bobine_title)) + " " + orderDetail?.StringDetails!![0].String.Model + " (" + orderDetail?.StringDetails!![0].String.Length + ")"

            binding.tvOrderDetailStringJauge.text =
                requireContext().resources.getString(R.string.gauge) + ": " + orderDetail?.StringDetails?.get(
                    0
                )?.String?.Jauge

            if (orderDetail?.StringDetails?.get(0)?.String?.Color.isNullOrEmpty()) binding.tvOrderDetailStringColor.visibility =
                View.GONE else binding.tvOrderDetailStringColor.text =
                requireContext().resources.getString(R.string.color) + ": " + orderDetail?.StringDetails?.get(
                    0
                )?.String?.Color

            if (orderDetail?.StringDetails?.get(0)?.TensionHorizontal != null && orderDetail?.StringDetails?.get(
                    0
                )?.TensionVertical != null
            ) {
                binding.tvOrderDetailStringTension.visibility = View.GONE
                binding.tvOrderDetailStringTensionHorizontal.visibility = View.VISIBLE
                binding.tvOrderDetailStringTensionVertical.visibility = View.VISIBLE

                binding.tvOrderDetailStringTensionHorizontal.text =
                    requireContext().resources.getString(R.string.tension_horizontal_).plus(" ") +
                            orderDetail?.StringDetails?.get(0)?.TensionHorizontal?.split(" ")
                                ?.get(0)
                                .plus(" Kg")
                binding.tvOrderDetailStringTensionVertical.text =
                    requireContext().resources.getString(R.string.tension_vertical_).plus(" ") +
                            orderDetail?.StringDetails?.get(0)?.TensionVertical?.split(" ")?.get(0)
                                .plus(" Kg")
            } else {
                binding.tvOrderDetailStringTension.visibility = View.VISIBLE
                binding.tvOrderDetailStringTensionHorizontal.visibility = View.GONE
                binding.tvOrderDetailStringTensionVertical.visibility = View.GONE

                if (orderDetail?.StringDetails?.get(0)?.TensionHorizontal != null)
                    binding.tvOrderDetailStringTension.text =
                        requireContext().resources.getString(R.string.tension_) + " " +
                                orderDetail?.StringDetails?.get(0)?.TensionHorizontal?.split(" ")
                                    ?.get(0).plus(" Kg")
                else if (orderDetail?.StringDetails?.get(0)?.TensionVertical != null)
                    binding.tvOrderDetailStringTension.text =
                        requireContext().resources.getString(R.string.tension_) + " " +
                                orderDetail?.StringDetails?.get(0)?.TensionVertical?.split(" ")
                                    ?.get(0)
                                    .plus(" Kg")
            }


            if (orderDetail?.StringDetails?.get(0)?.StringFinished == true)
                binding.tvOrderDetailStringPoseCounter.text =
                    requireContext().resources.getString(R.string.string_remaining) + ": 0.0"
            else
                binding.tvOrderDetailStringPoseCounter.text =
                    requireContext().resources.getString(R.string.string_remaining) + ": " + (orderDetail?.StringDetails?.get(
                        0
                    )?.RemainingStringCount ?: 0.0)

            if (orderDetail?.OrderDetails?.OrderStatus == 8) {
                if (orderDetail?.StringerDetail != null) {
                    binding.tvOrderDetailStringStringer.text =
                        requireContext().resources.getString(R.string.stringer) + ": " + orderDetail?.StringerDetail?.get(
                            0
                        )?.Name
                }
            }

            if (orderDetail?.OrderDetails?.TotalPrice ?: 0.0 <= 0.0)
                binding.tvOrderDetailPaymentDetail.text =
                    getString(R.string.payment).plus(" ").plus("0,00")
                        .plus(getString(R.string.euro))
            else {
                var stringPrice =
                    orderDetail?.OrderServiceandStringCharge?.CustomerStringPrice ?: 0.0
                var selectedServicePrice =
                    orderDetail?.OrderServiceandStringCharge?.CustomerServicePrice ?: 0.0
                var orderDeliveryCharge = orderDetail?.OrderDetails?.DeliveryCharges ?: 0.0

                var sb = StringBuilder()
                if (stringPrice > 0.0) {
                    sb.append(DecimalFormat("0.00").format(stringPrice))
                        .append(getString(R.string.euro)).append(" +")
                }
                if (selectedServicePrice > 0.0) {
                    sb.append(DecimalFormat("0.00").format(selectedServicePrice))
                        .append(getString(R.string.euro)).append(" +")
                }
                if (orderDeliveryCharge > 0.0) {
                    sb.append(DecimalFormat("0.00").format(orderDeliveryCharge))
                        .append(getString(R.string.euro))
                }

                if (sb.toString().endsWith("+")) {
                    val a = sb.substring(0, sb.toString().length - 2)
                    sb.clear()
                    sb.append(a)
                }

                var a = 0
                if (stringPrice > 0.0)
                    a++
                if (selectedServicePrice > 0.0)
                    a++
                if (orderDeliveryCharge > 0.0)
                    a++

                binding.tvOrderDetailPaymentDetail.text =
                    getString(R.string.payment).plus(" ").plus(sb.toString().trim())
                        .plus(" = " + DecimalFormat("0.00").format(orderDetail?.OrderDetails?.TotalPrice))
                        .plus(getString(R.string.euro))

                if (a == 1) {
                    binding.tvOrderDetailPaymentDetail.text =
                        getString(R.string.payment)
                            .plus(" " + DecimalFormat("0.00").format(orderDetail?.OrderDetails?.TotalPrice))
                            .plus(getString(R.string.euro))

                }

                if (Locale.getDefault().language == "fr") {
                    binding.tvOrderDetailPaymentDetail.text =
                        binding.tvOrderDetailPaymentDetail.text.toString().replace(".", ",")
                }

            }

            binding.btnOrderDetailStringPrint.setOnClickListener {
                var orderDateTime = getString(R.string.receipt_date).plus(": ").plus(
                    SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.getDefault()).format(
                        SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).parse(
                            orderDetail?.OrderDetails?.OrderDate
                        )
                    )
                )

                var tensionDisplay: String =
                    if (orderDetail?.StringDetails?.get(0)?.TensionHorizontal == null) {
                        getString(R.string.tension_).plus(" ")
                            .plus(
                                orderDetail?.StringDetails?.get(0)?.TensionVertical?.split(" ")
                                    ?.get(0)
                                    ?.trim()
                            )
                            .plus(" Kg")
                    } else {
                        getString(R.string.tension_vertical_).plus(" ")
                            .plus(
                                orderDetail?.StringDetails?.get(0)?.TensionVertical?.split(" ")
                                    ?.get(0)
                                    ?.trim()
                            )
                            .plus(" Kg").plus(" ").plus(getString(R.string.and))
                            .plus(" ")
                            .plus(getString(R.string.tension_horizontal_)).plus(" ")
                            .plus(
                                orderDetail?.StringDetails?.get(0)?.TensionHorizontal?.split(" ")
                                    ?.get(0)?.trim()
                            ).plus(" Kg")
                    }


                var deliveryPrice = orderDetail?.OrderDetails?.DeliveryCharges ?: 0.0
                var servicePrice =
                    orderDetail?.OrderServiceandStringCharge?.CustomerServicePrice ?: 0.0
                var stringPrice =
                    orderDetail?.OrderServiceandStringCharge?.CustomerStringPrice ?: 0.0
                var total = orderDetail?.OrderDetails?.TotalPrice ?: 0.0

                var priceDisplay: String? = null

                if (total > 0.0) {
                    var sb = StringBuilder()
                    if (stringPrice > 0.0 || orderDetail?.StringDetails?.get(0)?.IsShopPurchased == true) {
                        sb.append(DecimalFormat("0.00").format(stringPrice))
                            .append(getString(R.string.euro)).append(" +")
                    }
                    if (servicePrice > 0.0) {
                        sb.append(DecimalFormat("0.00").format(servicePrice))
                            .append(getString(R.string.euro)).append(" +")
                    }
                    if (deliveryPrice > 0.0) {
                        sb.append(DecimalFormat("0.00").format(deliveryPrice))
                            .append(getString(R.string.euro))
                    }

                    if (sb.toString().endsWith("+")) {
                        val a = sb.substring(0, sb.toString().length - 2)
                        sb.clear()
                        sb.append(a)
                    }

                    var a = 0
                    if (stringPrice > 0.0 || orderDetail?.StringDetails?.get(0)?.IsShopPurchased == true)
                        a++
                    if (servicePrice > 0.0)
                        a++
                    if (deliveryPrice > 0.0)
                        a++

                    priceDisplay =
                        getString(R.string.payment).plus(" ").plus(sb.toString().trim())
                            .plus(" = " + DecimalFormat("0.00").format(total))
                            .plus(getString(R.string.euro))

                    if (a == 1) {
                        priceDisplay =
                            getString(R.string.payment).plus(
                                " " + DecimalFormat("0.00").format(
                                    total
                                )
                            )
                                .plus(getString(R.string.euro))

                    }

                    if (Locale.getDefault().language == "fr") {
                        priceDisplay = priceDisplay.replace(".", ",")
                    }
                } else
                    priceDisplay = null

                var stringDetailPrint =
                    (orderDetail?.StringDetails?.get(0)?.String?.PackagingName?.lowercase(Locale.getDefault())
                        ?.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() }
                        ?: "").plus(": ")
                        .plus(
                            if (orderDetail?.StringDetails?.get(0)?.IsPersonalString == false) ((orderDetail?.StringDetails?.get(
                                0
                            )?.String?.Model ?: "").plus(" (")
                                .plus(orderDetail?.StringDetails?.get(0)?.String?.Brand ?: "")
                                .plus(")")) else
                                (getString(R.string.personal_string_string).plus(
                                    if (orderDetail?.StringDetails?.get(0)?.String?.Brand.equals(
                                            getString(R.string.don_t_know)
                                        ) || orderDetail?.StringDetails?.get(0)?.String?.Model.equals(
                                            getString(R.string.don_t_know)
                                        ) || orderDetail?.StringDetails?.get(0)?.String?.Length.equals(
                                            getString(R.string.don_t_know)
                                        ) || orderDetail?.StringDetails?.get(0)?.String?.Color.equals(
                                            getString(R.string.don_t_know)
                                        ) || orderDetail?.StringDetails?.get(0)?.String?.Jauge.equals(
                                            getString(R.string.don_t_know)
                                        ) ||
                                        orderDetail?.StringDetails?.get(0)?.String?.Brand.equals(
                                            getString(R.string.not_found)
                                        ) || orderDetail?.StringDetails?.get(0)?.String?.Model.equals(
                                            getString(R.string.not_found)
                                        ) || orderDetail?.StringDetails?.get(0)?.String?.Length.equals(
                                            getString(R.string.not_found)
                                        ) || orderDetail?.StringDetails?.get(0)?.String?.Color.equals(
                                            getString(R.string.not_found)
                                        ) || orderDetail?.StringDetails?.get(0)?.String?.Jauge.equals(
                                            getString(R.string.not_found)
                                        )
                                    )
                                        (" (" + getString(R.string.don_t_know) + ")")
                                    else
                                        (" (${orderDetail?.StringDetails?.get(0)?.String?.Model ?: ""} (${
                                            orderDetail?.StringDetails?.get(
                                                0
                                            )?.String?.Brand ?: ""
                                        }))")
                                ))
                        )

                Toast.makeText(
                    requireContext(),
                    getString(R.string.receipt_printing),
                    Toast.LENGTH_LONG
                ).show()
                var printerReturn = getAsyncEscPosPrinter(
                    requireContext(),
                    "#${orderDetail?.OrderDetails?.OrderID}", orderDateTime,
                    deliveryDateTime1.plus(": ").plus(deliveryDateTime),
                    if (total == 0.0) "" else priceDisplay,
                    binding.tvOrderDetailCustomerName.text.toString(),
                    getString(R.string.racket_title).plus(": ").plus(
                        (orderDetail?.RacketDetails?.Brand ?: "")
                    ).plus(" ")
                        .plus(orderDetail?.RacketDetails?.Range ?: "").plus(" ")
                        .plus(" ").plus(orderDetail?.RacketDetails?.Modele ?: "")
                        .plus(" ").plus(orderDetail?.RacketDetails?.Version ?: "")
                        .plus(" ")
                        .plus(if (orderDetail?.RacketDetails?.Weight == null) null else " (${orderDetail?.RacketDetails?.Weight?.toInt()} GR)"),
                    stringDetailPrint,
                    orderDetail?.StringDetails?.get(0)?.String?.Jauge ?: "",
                    orderDetail?.StringDetails?.get(0)?.String?.Color ?: "",
                    tensionDisplay,
                    getString(R.string.receipt_title),
                    orderDetail?.OrderDetails?.OrderFrom ?: 0,
                    orderDetail?.OrderDetails?.ClientAdminAppOrderFor ?: 16,
                    orderDetail?.CustomerDetails?.Initial ?: 1,
                    orderDetail?.CustomerDetails?.Fname,
                    orderDetail?.CustomerDetails?.EmailAddress
                )

                Timer().schedule(5000) {
                    printerReturn.disconnectPrinter()
                }
            }

            binding.btnOrderDetailStringReminderEmail.setOnClickListener {
                when {
                    orderDetail?.CustomerDetails?.EmailAddress == null -> {
                        Toast.makeText(
                            requireContext(),
                            getString(R.string.email_not_found),
                            Toast.LENGTH_LONG
                        ).show()
                    }
                    orderDetail?.CustomerDetails?.IsSubscribed != true -> {
                        Toast.makeText(
                            requireContext(),
                            getString(R.string.email_not_subscribed),
                            Toast.LENGTH_LONG
                        ).show()
                    }
                    else -> {
                        if (checkInternetConnection(requireContext())) {
                            progressDialog = ProgressDialog(requireContext())
                            progressDialog.setCancelable(false)
                            progressDialog.setMessage(requireContext().resources.getString(R.string.loading))
                            progressDialog.show()

                            binding.btnOrderDetailStringReminderEmail.isEnabled = false
                            getShopTimingDetails()
                        } else
                            Toast.makeText(
                                requireContext(),
                                getString(R.string.no_internet_connection),
                                Toast.LENGTH_LONG
                            ).show()
                    }
                }
            }
            
            binding.btnOrderDetailStringCompleteOrder.setOnClickListener {
                if (checkInternetConnection(requireContext())) {
                    if (navController.currentDestination?.id == R.id.qrcodeCustomerOrderDetailFragment)
                        navController.navigate(R.id.action_qrcodeCustomerOrderDetailFragment_to_qrcodeCustomerOrderCompleteFragment)
                } else
                    Toast.makeText(
                        requireContext(),
                        getString(R.string.no_internet_connection),
                        Toast.LENGTH_LONG
                    ).show()
            }

            btn_order_detail_state_change.setOnClickListener {
                stateChangeDialog.show(
                    (requireContext() as AppCompatActivity).supportFragmentManager,
                    "Racket State Change Dialog"
                )
            }
        } catch (e: Exception) {
            Log.d("TAG", "onCreateView: $e")
        }
    }

    private fun getShopTimingDetails() {
        RetrofitClient.apiInterface.getShopTimingList(
            getPreference(requireContext(), "shopTokenId"),
            getPreference(requireContext(), "shopId").toInt()
        )
            .enqueue(object : Callback<ArrayList<ShopTimingList_Pojo>> {
                override fun onFailure(call: Call<ArrayList<ShopTimingList_Pojo>>, t: Throwable) {
                    Log.v("DEBUG : ", t.message.toString())

                    binding.btnOrderDetailStringReminderEmail.isEnabled = true
                }

                override fun onResponse(
                    call: Call<ArrayList<ShopTimingList_Pojo>>,
                    response: Response<ArrayList<ShopTimingList_Pojo>>
                ) {
                    Log.v("DEBUG : ", response.body().toString())

                    if (response.isSuccessful) {
                        val data = response.body()
                        if (data != null) {
                            shopTimingList.clear()
                            shopTimingList.addAll(data)

                            var shopTiming =
                                mergeShopTimingFunction(requireContext(), shopTimingList)
                            shopTiming = shopTiming.replace("<br>\n", ", ")
                            shopTiming =
                                if (shopTiming.endsWith(", ")) shopTiming.removeSuffix(", ") else shopTiming

                            callEmailSendAPI(shopTiming)
                        }
                    } else
                        getShopTimingDetails()
                }
            })
    }

    private fun callEmailSendAPI(shopTiming: String) {
        val racketDisplay = (orderDetail?.RacketDetails?.Brand ?: "").plus(" ")
            .plus(orderDetail?.RacketDetails?.Range ?: "").plus(" ")
            .plus(orderDetail?.RacketDetails?.Modele ?: "").plus(" ")
            .plus(orderDetail?.RacketDetails?.Version ?: "").plus(" ")
            .plus(if (orderDetail?.RacketDetails?.Weight == null) "" else "(${orderDetail?.RacketDetails?.Weight}GR)")
        val tensionDisplay = if (binding.tvOrderDetailStringTension.visibility == VISIBLE)
            binding.tvOrderDetailStringTension.text.toString()
        else
            "${binding.tvOrderDetailStringTensionVertical.text} ${getString(R.string.and)} ${binding.tvOrderDetailStringTensionHorizontal.text}"
        val stringDisplay =
            orderDetail?.StringDetails!![0].String.Brand + " " + orderDetail?.StringDetails!![0].String.Model +
                    (if (orderDetail?.StringDetails!![0].IsPersonalString) " (${getString(R.string.personal_string_string).uppercase()})" else "")

        var resendEmailData = ResendEmailData(
            orderDetail?.CustomerDetails?.CustomerShopID,
            true,
            orderDetail?.StringDetails?.get(0)?.StringFinished,
            orderDetail?.StringDetails?.get(0)?.Service?.ServiceFinished,
            getPreference(requireContext(), "shopId").toInt(),
            orderDetail?.CustomerDetails?.EmailAddress,
            binding.tvOrderDetailCustomerName.text.toString(),
            racketDisplay,
            tensionDisplay,
            orderDetail?.StringDetails?.get(0)?.String?.Jauge,
            stringDisplay,
            orderDetail?.StringerDetail?.get(0)?.Name ?: "-",
            shopTiming,
            orderDetail?.StringDetails?.get(0)?.Service?.ServiceMasterID
        )

        RetrofitClient.apiInterface.resendCompletedOrderEmail(
            getPreference(requireContext(), "shopTokenId"),
            getPreference(requireContext(), "shopId").toInt(), resendEmailData
        )
            .enqueue(object : Callback<ResendEmailData_Output> {
                override fun onFailure(call: Call<ResendEmailData_Output>, t: Throwable) {
                    Log.v("DEBUG : ", t.message.toString())

                    binding.btnOrderDetailStringReminderEmail.isEnabled = true
                }

                override fun onResponse(
                    call: Call<ResendEmailData_Output>,
                    response: Response<ResendEmailData_Output>
                ) {
                    Log.v("DEBUG : ", response.body().toString())
                    binding.btnOrderDetailStringReminderEmail.isEnabled = true

                    if (response.isSuccessful) {
                        val data = response.body()
                        if (data != null) {
                            progressDialog.dismiss()
                            if (data.emailSent == true) {
                                Toast.makeText(
                                    requireContext(),
                                    getString(R.string.msg_email_sent_successfully),
                                    Toast.LENGTH_LONG
                                ).show()
                            } else {
                                Toast.makeText(
                                    requireContext(),
                                    getString(R.string.email_sent_failed),
                                    Toast.LENGTH_LONG
                                ).show()
                            }
                        }
                    } else
                        callEmailSendAPI(shopTiming)
                }
            })
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setHasOptionsMenu(true)
    }

    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        super.onCreateOptionsMenu(menu, inflater)

        menu.clear()
    }

}
