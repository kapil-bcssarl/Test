package com.borakay.tennisproadminapplicationnodesignchange.view.fragments

import android.app.AlertDialog
import android.app.DatePickerDialog
import android.app.ProgressDialog
import android.content.Context
import android.content.DialogInterface
import android.graphics.Typeface
import android.os.Bundle
import android.util.Log
import android.view.*
import android.view.View.*
import android.widget.FrameLayout
import android.widget.NumberPicker
import android.widget.TextView
import android.widget.Toast
import androidx.core.content.ContextCompat
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.ViewModelProviders
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.borakay.tennisproadminapplicationnodesignchange.ModelFactory.ShopTimingAndHolidayFragmentModelFactory
import com.borakay.tennisproadminapplicationnodesignchange.R
import com.borakay.tennisproadminapplicationnodesignchange.databinding.ShopTimingHolidayFragmentBinding
import com.borakay.tennisproadminapplicationnodesignchange.model_pojoclass.*
import com.borakay.tennisproadminapplicationnodesignchange.retrofit.ApiHelper
import com.borakay.tennisproadminapplicationnodesignchange.retrofit.RetrofitClient
import com.borakay.tennisproadminapplicationnodesignchange.staticvaluesfolder.*
import com.borakay.tennisproadminapplicationnodesignchange.view.MainActivity
import com.borakay.tennisproadminapplicationnodesignchange.view.adapters.HolidayManagementAdapter
import com.borakay.tennisproadminapplicationnodesignchange.viewmodel.fragments.ShopTimingAndHoliday_New_ViewModel
import com.borakay.tennisproadminapplicationnodesignchange.viewmodel.fragments.ShopTimingHolidayViewModel
import kotlinx.android.synthetic.main.shop_timing_holiday_fragment.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.DateFormatSymbols
import java.util.*
import kotlin.collections.ArrayList

class ShopTimingHolidayFragment : Fragment() {

    companion object {
        fun newInstance() = ShopTimingHolidayFragment()
        lateinit var holidayAdapter: HolidayManagementAdapter
        lateinit var viewModelShopTimingNHoliday: ShopTimingHolidayViewModel
        var holidayListing = arrayListOf<HolidayList_Pojo>()
        lateinit var skipDateListing: DaySkip_Pojo

        lateinit var progressDialogShopTimingHoliday_1: ProgressDialog
        lateinit var progressDialogShopTimingHoliday_2: ProgressDialog
    }

    var shopTimingList = arrayListOf<ShopTimingList_Pojo>()
    var timingList = arrayOf(
        "06.00", "06.30", "07.00", "07.30", "08.00", "08.30", "09.00", "09.30", "10.00", "10.30",
        "11.00", "11.30", "12.00", "12.30", "13.00", "13.30", "14.00", "14.30", "15.00",
        "15.30", "16.00", "16.30", "17.00", "17.30", "18.00", "18.30", "19.00", "19.30",
        "20.00", "20.30", "21.00", "21.30", "22.00", "22.30", "23.00", "23.30"
    )
    var StandardDayList = arrayOf("0", "1", "2", "3", "4", "5", "6", "7")
    var ExpressDayList = arrayOf("0", "1", "2")

    var holidayDate: String? = null
    lateinit var racketStateChangeUpdateBody: RacketStateChangeUpdateBody

    private lateinit var viewModelNew: ShopTimingAndHoliday_New_ViewModel
    lateinit var binding: ShopTimingHolidayFragmentBinding

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return try {
            binding = ShopTimingHolidayFragmentBinding.bind(
                inflater.inflate(R.layout.shop_timing_holiday_fragment, container, false)
            )
            binding.root
        } catch (e: Exception) {
            Log.d("TAG", "onCreateView: $e")
            null
        }
    }

    private fun setupViewModel() {
        try {
            viewModelNew = ViewModelProviders.of(
                requireActivity(),
                ShopTimingAndHolidayFragmentModelFactory(ApiHelper(RetrofitClient.apiInterface))
            ).get(ShopTimingAndHoliday_New_ViewModel::class.java)

        } catch (e: Exception) {
            Log.d("TAG", "onActivityCreated: $e")
        }
    }

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)

        try {
            setupViewModel()

            viewModelShopTimingNHoliday =
                ViewModelProvider(this)[ShopTimingHolidayViewModel::class.java]

            MainActivity.activityMainBinding.tvMainActivityToolbarTitle.text =
                getString(R.string.shop_time_title)
            MainActivity.activityMainBinding.tbMainActivityToolbar.elevation = 0f

            progressDialogShopTimingHoliday_1 = ProgressDialog(requireContext())
            progressDialogShopTimingHoliday_1.setMessage(getString(R.string.loading))
            progressDialogShopTimingHoliday_1.setCancelable(false)

            progressDialogShopTimingHoliday_2 = ProgressDialog(requireContext())
            progressDialogShopTimingHoliday_2.setMessage(getString(R.string.loading))
            progressDialogShopTimingHoliday_2.setCancelable(false)

            binding.ivHoliday.setOnClickListener {
                binding.view1.background = ContextCompat.getDrawable(
                    requireContext(),
                    R.drawable.text_view_yellow_square_border_focused
                )
                binding.holidayTv?.typeface = Typeface.DEFAULT_BOLD

                binding.view2.background = ContextCompat.getDrawable(
                    requireContext(),
                    R.drawable.text_view_yellow_square_border
                )
                binding.holidayTv?.typeface = Typeface.DEFAULT

                binding.view3.background = ContextCompat.getDrawable(
                    requireContext(),
                    R.drawable.text_view_yellow_square_border
                )
                binding.holidayTv?.typeface = Typeface.DEFAULT

                binding.viewHoliday.visibility = VISIBLE
                binding.groupHolidays.visibility = VISIBLE
                binding.tvShopTimingAddHoliday.visibility = GONE
                binding.viewTiming.visibility = GONE
                binding.viewConfig.visibility = GONE
                binding.cvShopTimingCard?.visibility = GONE
                binding.groupOthers.visibility = GONE
                MainActivity.activityMainBinding.tvMainActivityToolbarTitle.text =
                    getString(R.string.shop_time_title)
                binding.evHolidayList.visibility = GONE
                binding.tvNoHoliday.visibility = GONE
            }

            binding.ivTiming?.setOnClickListener {
                binding.view1.background = ContextCompat.getDrawable(
                    requireContext(),
                    R.drawable.text_view_yellow_square_border
                )
                binding.holidayTv?.typeface = Typeface.DEFAULT

                binding.view2.background = ContextCompat.getDrawable(
                    requireContext(),
                    R.drawable.text_view_yellow_square_border_focused
                )
                binding.holidayTv?.typeface = Typeface.DEFAULT_BOLD

                binding.view3.background = ContextCompat.getDrawable(
                    requireContext(),
                    R.drawable.text_view_yellow_square_border
                )
                binding.holidayTv?.typeface = Typeface.DEFAULT

                binding.viewTiming.visibility = VISIBLE
                binding.tvShopTimingAddHoliday.visibility = VISIBLE
                binding.tvShopTimingAddHoliday.setOnClickListener {
                    binding.cvShopTimingCard?.visibility = VISIBLE
                    binding.vShopTimingDimBackground?.visibility = VISIBLE
                    binding.tvShopTimingAddHoliday.visibility = INVISIBLE
                }

                binding.closeCard?.setOnClickListener {
                    binding.tilHolidayTitle.isErrorEnabled = false
                    binding.tilHolidayDate.isErrorEnabled = false
                    binding.atlHolidayTitle.text = null
                    binding.atlHolidayDate.text = null
                    hideSoftKeyboard(requireActivity())

                    binding.vShopTimingDimBackground?.visibility = GONE
                    binding.cvShopTimingCard?.visibility = GONE
                    binding.tvShopTimingAddHoliday.visibility = VISIBLE
                }

                binding.viewHoliday.visibility = GONE
                binding.viewConfig.visibility = GONE
                binding.groupOthers.visibility = GONE
                binding.groupHolidays.visibility = GONE
                MainActivity.activityMainBinding.tvMainActivityToolbarTitle.text =
                    getString(R.string.holiday_title_1)
                callShopHolidayListing(
                    getPreference(requireContext(), "shopTokenId"),
                    getPreference(requireContext(), "shopId").toInt()
                )
            }

            binding.ivConfig.setOnClickListener {
                binding.view1.background = ContextCompat.getDrawable(
                    requireContext(),
                    R.drawable.text_view_yellow_square_border
                )
                binding.holidayTv?.typeface = Typeface.DEFAULT

                binding.view2.background = ContextCompat.getDrawable(
                    requireContext(),
                    R.drawable.text_view_yellow_square_border
                )
                binding.holidayTv?.typeface = Typeface.DEFAULT

                binding.view3.background = ContextCompat.getDrawable(
                    requireContext(),
                    R.drawable.text_view_yellow_square_border_focused
                )
                binding.holidayTv?.typeface = Typeface.DEFAULT_BOLD

                binding.viewConfig.visibility = VISIBLE
                binding.groupOthers.visibility = VISIBLE
                binding.viewHoliday.visibility = GONE
                binding.tvShopTimingAddHoliday.visibility = GONE
                binding.viewTiming.visibility = GONE
                binding.groupHolidays.visibility = GONE
                binding.cvShopTimingCard?.visibility = GONE
                MainActivity.activityMainBinding.tvMainActivityToolbarTitle.text =
                    getString(R.string.other)
                binding.evHolidayList.visibility = GONE
                binding.tvNoHoliday.visibility = GONE
            }

            binding.checkboxSunday.setOnCheckedChangeListener { buttonView, isChecked ->
                if (isChecked) {
                    binding.atlShopTimingOpenTimeSunday.text = "10.00"
                    binding.atlShopTimingCloseTimeSunday.text = "19.00"
                } else {
                    binding.atlShopTimingOpenTimeSunday.setText("00.00")
                    binding.atlShopTimingCloseTimeSunday.setText("00.00")
                }
            }
            binding.checkboxMonday.setOnCheckedChangeListener { buttonView, isChecked ->
                if (isChecked) {
                    binding.atlShopTimingOpenTimeMonday.setText("10.00")
                    binding.atlShopTimingCloseTimeMonday.setText("19.00")
                } else {
                    binding.atlShopTimingOpenTimeMonday.setText("00.00")
                    binding.atlShopTimingCloseTimeMonday.setText("00.00")
                }
            }
            binding.checkboxTuesday.setOnCheckedChangeListener { buttonView, isChecked ->
                if (isChecked) {
                    binding.atlShopTimingOpenTimeTuesday.setText("10.00")
                    binding.atlShopTimingCloseTimeTuesday.setText("19.00")
                } else {
                    binding.atlShopTimingOpenTimeTuesday.setText("00.00")
                    binding.atlShopTimingCloseTimeTuesday.setText("00.00")
                }
            }
            binding.checkboxWednesday.setOnCheckedChangeListener { buttonView, isChecked ->
                if (isChecked) {
                    binding.atlShopTimingOpenTimeWednesday.setText("10.00")
                    binding.atlShopTimingCloseTimeWednesday.setText("19.00")
                } else {
                    binding.atlShopTimingOpenTimeWednesday.setText("00.00")
                    binding.atlShopTimingCloseTimeWednesday.setText("00.00")
                }
            }
            binding.checkboxThursday.setOnCheckedChangeListener { buttonView, isChecked ->
                if (isChecked) {
                    binding.atlShopTimingOpenTimeThursday.setText("10.00")
                    binding.atlShopTimingCloseTimeThursday.setText("19.00")
                } else {
                    binding.atlShopTimingOpenTimeThursday.setText("00.00")
                    binding.atlShopTimingCloseTimeThursday.setText("00.00")
                }
            }
            binding.checkboxFriday.setOnCheckedChangeListener { buttonView, isChecked ->
                if (isChecked) {
                    binding.atlShopTimingOpenTimeFriday.setText("10.00")
                    binding.atlShopTimingCloseTimeFriday.setText("19.00")
                } else {
                    binding.atlShopTimingOpenTimeFriday.setText("00.00")
                    binding.atlShopTimingCloseTimeFriday.setText("00.00")
                }
            }
            binding.checkboxSaturday.setOnCheckedChangeListener { buttonView, isChecked ->
                if (isChecked) {
                    binding.atlShopTimingOpenTimeSaturday.setText("10.00")
                    binding.atlShopTimingCloseTimeSaturday.setText("19.00")
                } else {
                    binding.atlShopTimingOpenTimeSaturday.setText("00.00")
                    binding.atlShopTimingCloseTimeSaturday.setText("00.00")
                }
            }

            binding.atlShopTimingOpenTimeSunday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.opening_time,
                        resources.getString(R.string.weekday_sunday)
                    ), binding.atlShopTimingOpenTimeSunday
                )
            }

            binding.atlShopTimingOpenTimeMonday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.opening_time,
                        resources.getString(R.string.weekday_monday)
                    ), binding.atlShopTimingOpenTimeMonday
                )
            }

            binding.atlShopTimingOpenTimeTuesday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.opening_time,
                        resources.getString(R.string.weekday_tuesday)
                    ), binding.atlShopTimingOpenTimeTuesday
                )
            }

            binding.atlShopTimingOpenTimeWednesday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.opening_time,
                        resources.getString(R.string.weekday_wednesday)
                    ), binding.atlShopTimingOpenTimeWednesday
                )
            }

            binding.atlShopTimingOpenTimeThursday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.opening_time,
                        resources.getString(R.string.weekday_thursday)
                    ), binding.atlShopTimingOpenTimeThursday
                )
            }

            binding.atlShopTimingOpenTimeFriday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.opening_time,
                        resources.getString(R.string.weekday_friday)
                    ), binding.atlShopTimingOpenTimeFriday
                )
            }

            binding.atlShopTimingOpenTimeSaturday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.opening_time,
                        resources.getString(R.string.weekday_saturday)
                    ), binding.atlShopTimingOpenTimeSaturday
                )
            }

            binding.atlShopTimingCloseTimeSunday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.closing_time,
                        resources.getString(R.string.weekday_sunday)
                    ), binding.atlShopTimingCloseTimeSunday
                )
            }

            binding.atlShopTimingCloseTimeMonday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.closing_time,
                        resources.getString(R.string.weekday_monday)
                    ), binding.atlShopTimingCloseTimeMonday
                )
            }

            binding.atlShopTimingCloseTimeTuesday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.closing_time,
                        resources.getString(R.string.weekday_tuesday)
                    ), binding.atlShopTimingCloseTimeTuesday
                )
            }

            binding.atlShopTimingCloseTimeWednesday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.closing_time,
                        resources.getString(R.string.weekday_wednesday)
                    ), binding.atlShopTimingCloseTimeWednesday
                )
            }

            binding.atlShopTimingCloseTimeThursday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.closing_time,
                        resources.getString(R.string.weekday_thursday)
                    ), binding.atlShopTimingCloseTimeThursday
                )
            }

            binding.atlShopTimingOpenTimeFriday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.closing_time,
                        resources.getString(R.string.weekday_friday)
                    ), binding.atlShopTimingOpenTimeFriday
                )
            }

            binding.atlShopTimingCloseTimeSaturday.setOnClickListener {
                openDialogForTiming(
                    resources.getString(
                        R.string.closing_time,
                        resources.getString(R.string.weekday_saturday)
                    ), binding.atlShopTimingCloseTimeSaturday
                )
            }

            binding.tilStandardDelivery.setEndIconOnClickListener {
                binding.atlStandardDelivery.performClick()
            }

            binding.atlStandardDelivery.setOnClickListener {
                binding.atlStandardDelivery.clearFocus()
                val picker = NumberPicker(context)
                picker.minValue = 0
                picker.maxValue = StandardDayList.size - 1
                picker.displayedValues = StandardDayList
                picker.value = StandardDayList.indexOf(binding.atlStandardDelivery.text.toString())
                picker.descendantFocusability = NumberPicker.FOCUS_BLOCK_DESCENDANTS
                val layout = FrameLayout(requireContext())
                layout.addView(
                    picker, FrameLayout.LayoutParams(
                        FrameLayout.LayoutParams.WRAP_CONTENT,
                        FrameLayout.LayoutParams.WRAP_CONTENT,
                        Gravity.CENTER
                    )
                )

                AlertDialog.Builder(context)
                    .setView(layout)
                    .setTitle(getString(R.string.select_days))
                    .setPositiveButton(
                        android.R.string.ok
                    ) { _: DialogInterface?, i: Int ->
                        binding.atlStandardDelivery.setText(StandardDayList[picker.value])
                    }
                    .setNegativeButton(android.R.string.cancel, null)
                    .show()
            }

            binding.tilExpressDelivery.setEndIconOnClickListener {
                binding.atlExpressDelivery.performClick()
            }

            binding.atlExpressDelivery.setOnClickListener {
                binding.tilExpressDelivery.clearFocus()
                val picker = NumberPicker(context)
                picker.minValue = 0
                picker.maxValue = ExpressDayList.size - 1
                picker.displayedValues = ExpressDayList
                picker.value = ExpressDayList.indexOf(binding.atlExpressDelivery.text.toString())
                picker.descendantFocusability = NumberPicker.FOCUS_BLOCK_DESCENDANTS
                val layout = FrameLayout(requireContext())
                layout.addView(
                    picker, FrameLayout.LayoutParams(
                        FrameLayout.LayoutParams.WRAP_CONTENT,
                        FrameLayout.LayoutParams.WRAP_CONTENT,
                        Gravity.CENTER
                    )
                )

                AlertDialog.Builder(context)
                    .setView(layout)
                    .setTitle(getString(R.string.select_days))
                    .setPositiveButton(
                        android.R.string.ok
                    ) { _: DialogInterface?, i: Int ->
                        binding.atlExpressDelivery.setText(ExpressDayList[picker.value])
                    }
                    .setNegativeButton(android.R.string.cancel, null)
                    .show()
            }

            binding.btnShopTimeChargeTiming.setOnClickListener {
                progressDialogShopTimingHoliday_1.setMessage("Updating")
                progressDialogShopTimingHoliday_1.show()

                binding.btnShopTimeChargeTiming.isEnabled = false

                var shopTimingUpdateList = arrayListOf<ShopTimingList_Update_Pojo>()
                shopTimingUpdateList.clear()

                shopTimingUpdateList.add(
                    ShopTimingList_Update_Pojo(
                        binding.atlShopTimingCloseTimeSunday.text.toString(),
                        shopTimingList[0].ID,
                        binding.checkboxSunday.isChecked,
                        binding.atlShopTimingOpenTimeSunday.text.toString(),
                        shopTimingList[0].WeekDay,
                        getPreference(requireContext(), "RoleAssignmentID").toInt()
                    )
                )
                shopTimingUpdateList.add(
                    ShopTimingList_Update_Pojo(
                        binding.atlShopTimingCloseTimeMonday.text.toString(),
                        shopTimingList[1].ID,
                        binding.checkboxMonday.isChecked,
                        binding.atlShopTimingOpenTimeMonday.text.toString(),
                        shopTimingList[1].WeekDay,
                        getPreference(requireContext(), "RoleAssignmentID").toInt()
                    )
                )
                shopTimingUpdateList.add(
                    ShopTimingList_Update_Pojo(
                        binding.atlShopTimingCloseTimeTuesday.text.toString(),
                        shopTimingList[2].ID,
                        binding.checkboxTuesday.isChecked,
                        binding.atlShopTimingOpenTimeTuesday.text.toString(),
                        shopTimingList[2].WeekDay,
                        getPreference(requireContext(), "RoleAssignmentID").toInt()
                    )
                )
                shopTimingUpdateList.add(
                    ShopTimingList_Update_Pojo(
                        binding.atlShopTimingCloseTimeWednesday.text.toString(),
                        shopTimingList[3].ID,
                        binding.checkboxWednesday.isChecked,
                        binding.atlShopTimingOpenTimeWednesday.text.toString(),
                        shopTimingList[3].WeekDay,
                        getPreference(requireContext(), "RoleAssignmentID").toInt()
                    )
                )
                shopTimingUpdateList.add(
                    ShopTimingList_Update_Pojo(
                        binding.atlShopTimingCloseTimeThursday.text.toString(),
                        shopTimingList[4].ID,
                        binding.checkboxThursday.isChecked,
                        binding.atlShopTimingOpenTimeThursday.text.toString(),
                        shopTimingList[4].WeekDay,
                        getPreference(requireContext(), "RoleAssignmentID").toInt()
                    )
                )
                shopTimingUpdateList.add(
                    ShopTimingList_Update_Pojo(
                        binding.atlShopTimingCloseTimeFriday.text.toString(),
                        shopTimingList[5].ID,
                        binding.checkboxFriday.isChecked,
                        binding.atlShopTimingOpenTimeFriday.text.toString(),
                        shopTimingList[5].WeekDay,
                        getPreference(requireContext(), "RoleAssignmentID").toInt()
                    )
                )
                shopTimingUpdateList.add(
                    ShopTimingList_Update_Pojo(
                        binding.atlShopTimingCloseTimeSaturday.text.toString(),
                        shopTimingList[6].ID,
                        binding.checkboxSaturday.isChecked,
                        binding.atlShopTimingOpenTimeSaturday.text.toString(),
                        shopTimingList[6].WeekDay,
                        getPreference(requireContext(), "RoleAssignmentID").toInt()
                    )
                )

                if (checkInternetConnection(requireContext())) {
                    updateShopTiming(shopTimingUpdateList)
                } else
                    Toast.makeText(
                        requireContext(),
                        getString(R.string.no_internet_connection),
                        Toast.LENGTH_LONG
                    ).show()
            }

            binding.tilHolidayDate.setEndIconOnClickListener {
                binding.atlHolidayDate.performClick()
            }

            binding.atlHolidayDate.setOnClickListener {
                hideSoftKeyboard(requireActivity())
                binding.tilHolidayDate.clearFocus()
                binding.atlHolidayDate.clearFocus()
                binding.atlHolidayDate.text = null

                val c = Calendar.getInstance()
                val year = c.get(Calendar.YEAR)
                val month = c.get(Calendar.MONTH)
                val day = c.get(Calendar.DAY_OF_MONTH)

                val dpd = DatePickerDialog(
                    requireActivity(),
                    { view, year, monthOfYear, dayOfMonth ->
                        holidayDate = "$year-${
                            java.lang.String.format(
                                "%02d",
                                monthOfYear + 1
                            )
                        }-${java.lang.String.format("%02d", dayOfMonth)}"

                        var dateFound: Boolean? = false
                        for (h in holidayListing) {
                            if (h.HolidayDate.equals(holidayDate)) {
                                dateFound = true
                                break
                            }
                        }

                        if (!dateFound!!) {
                            binding.tilHolidayDate.isErrorEnabled = false
                            binding.atlHolidayDate.setText("" + dayOfMonth + " " + DateFormatSymbols.getInstance().months[monthOfYear] + " " + year)
                        } else {
                            Toast.makeText(
                                requireContext(),
                                requireContext().resources.getText(R.string.not_apply_holiday),
                                Toast.LENGTH_LONG
                            ).show()
                        }
                    }, year, month, day
                )
                val cal = Calendar.getInstance()
                cal.add(Calendar.DAY_OF_YEAR, 1)
                dpd.datePicker.minDate = cal.timeInMillis
                dpd.show()
            }

            binding.ivHolidayOk.setOnClickListener {
                var nameFound = false
                when {
                    binding.atlHolidayTitle.text.isEmpty() -> {
                        binding.tilHolidayTitle.isErrorEnabled = true
                        binding.tilHolidayTitle.error = getString(R.string.holiday_name_is_missing)
//                        val dr = context?.getDrawable(R.drawable.ic_error)
//                        dr?.setBounds(0, 0, dr.intrinsicWidth, dr.intrinsicHeight)
//                        txt_holiday_date.setError(getString(R.string.holiday_date_is_missing), dr)
                    }
                    binding.atlHolidayDate.text.isEmpty() -> {
                        binding.tilHolidayDate.isErrorEnabled = true
                        binding.tilHolidayDate.error = getString(R.string.holiday_date_is_missing)
//                        val dr = context?.getDrawable(R.drawable.ic_error)
//                        dr?.setBounds(0, 0, dr.intrinsicWidth, dr.intrinsicHeight)
//                        txt_holiday_title.setError(getString(R.string.holiday_name_is_missing), dr)
                    }
                    else -> {
                        progressDialogShopTimingHoliday_2.setMessage("Adding New Holiday")

                        for (i in holidayListing) {
                            if (i.HolidayName?.equals(binding.atlHolidayTitle.text.toString()) == true) {
                                nameFound = true
                                break
                            }
                        }

                        if (!nameFound) {
                            callAddShopHolidayFunction(requireContext())
                            binding.ivHolidayOk.isEnabled = false
                            binding.tilHolidayTitle.isErrorEnabled = false
                            binding.tilHolidayDate.isErrorEnabled = false
                            binding.tvShopTimingAddHoliday.visibility = VISIBLE
                            binding.vShopTimingDimBackground?.visibility = GONE
                            binding.cvShopTimingCard?.visibility = GONE
                            hideSoftKeyboard(requireActivity())
                        } else {
                            binding.tilHolidayTitle.isErrorEnabled = true
                            binding.tilHolidayTitle.error = getString(R.string.holiday_name_found)
                        }
                    }
                }
            }

            binding.btnRacketStateSave.setOnClickListener {
                when {
                    binding.atlMonthsReminder.text?.isEmpty() == true -> {
                        binding.tilMonthReminder.isErrorEnabled = true
                        binding.tilMonthReminder.error = getString(R.string.required_field)
                    }
                    else -> {
                        progressDialogShopTimingHoliday_1.show()

                        binding.btnRacketStateSave.isEnabled = false
                        binding.tilMonthReminder.isErrorEnabled = false

                        racketStateChangeUpdateBody.FrequencyInMonth =
                            binding.atlMonthsReminder.text.toString().toInt()

                        hideSoftKeyboard(requireActivity())
                        callUpdateRacketStateMonthValue(requireContext())

                        viewModelShopTimingNHoliday.updateSkipDayList(
                            getPreference(requireContext(), "shopTokenId"),
                            getPreference(requireContext(), "shopId").toInt(),
                            DataSkip_Update_Input(
                                skipDateListing.DeliveryID,
                                binding.atlExpressDelivery.text.toString().toInt(),
                                binding.atlStandardDelivery.text.toString().toInt(),
                                getPreference(
                                    requireContext(),
                                    "RoleAssignmentID"
                                ).toInt()
                            )
                        )?.observe(
                            viewLifecycleOwner
                        ) { response1 ->
                            if (response1 != null) {
                                if (response1.ShopID != null) {
                                    if (response1.ShopID!! == getPreference(
                                            requireContext(),
                                            "shopId"
                                        ).toInt()
                                    ) {
                                        binding.btnRacketStateSave.isEnabled = true
                                        progressDialogShopTimingHoliday_1.dismiss()
                                        Toast.makeText(
                                            requireContext(),
                                            requireContext().resources.getString(R.string.update_successfully),
                                            Toast.LENGTH_LONG
                                        ).show()
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (checkInternetConnection(requireContext())) {
                progressDialogShopTimingHoliday_1.show()
                viewModelShopTimingNHoliday.getShopTimingList(
                    getPreference(requireContext(), "shopTokenId"),
                    getPreference(requireContext(), "shopId").toInt()
                )?.observe(viewLifecycleOwner) { response ->
                    if (response != null) {
                        shopTimingList.clear()
                        shopTimingList.addAll(response)

                        viewModelShopTimingNHoliday.getSkipDayList(
                            getPreference(requireContext(), "shopTokenId"),
                            getPreference(requireContext(), "shopId").toInt()
                        )?.observe(viewLifecycleOwner) { response1 ->
                            if (response1 != null) {
                                skipDateListing = response1

                                binding.atlStandardDelivery.setText(response1.RegularDeliveryDays.toString())
                                binding.atlExpressDelivery.setText(response1.ExpressDeliveryDays.toString())
                                progressDialogShopTimingHoliday_1.dismiss()
                                displayShopTiming()
                            }
                        }
                    }
                }

                callDefaultRacketStateChangeValue(requireContext())
            } else
                Toast.makeText(
                    requireContext(),
                    getString(R.string.no_internet_connection),
                    Toast.LENGTH_LONG
                ).show()
        } catch (e: Exception) {
            Log.d("TAG", "onCreateView: $e")
        }
    }

    private fun updateShopTiming(shopTimingUpdateList: ArrayList<ShopTimingList_Update_Pojo>) {
        progressDialogShopTimingHoliday_1.show()
        viewModelNew.getShopTimingUpdated_List(
            getPreference(requireContext(), "shopTokenId"),
            getPreference(requireContext(), "shopId").toInt(),
            shopTimingUpdateList
        ).observe(viewLifecycleOwner) { response ->
            when (response.status) {
                Status.LOADING -> {
                    progressDialogShopTimingHoliday_1.show()
                }
                Status.ERROR -> {
                    updateShopTiming(shopTimingUpdateList)
                }
                Status.SUCCESS -> {
                    progressDialogShopTimingHoliday_1.dismiss()
                    val data = response.data

                    if (data?.ShopID != null) {
                        if (data.ShopID == getPreference(requireContext(), "shopId")) {
                            shopTimingList[0].IsOpen = binding.checkboxSunday.isChecked
                            shopTimingList[1].IsOpen = binding.checkboxMonday.isChecked
                            shopTimingList[2].IsOpen = binding.checkboxTuesday.isChecked
                            shopTimingList[3].IsOpen = binding.checkboxWednesday.isChecked
                            shopTimingList[4].IsOpen = binding.checkboxThursday.isChecked
                            shopTimingList[5].IsOpen = binding.checkboxFriday.isChecked
                            shopTimingList[6].IsOpen = binding.checkboxSaturday.isChecked

                            shopTimingList[0].StartTime =
                                binding.atlShopTimingOpenTimeSunday.text.toString()
                            shopTimingList[1].StartTime =
                                binding.atlShopTimingOpenTimeMonday.text.toString()
                            shopTimingList[2].StartTime =
                                binding.atlShopTimingOpenTimeTuesday.text.toString()
                            shopTimingList[3].StartTime =
                                binding.atlShopTimingOpenTimeWednesday.text.toString()
                            shopTimingList[4].StartTime =
                                binding.atlShopTimingOpenTimeThursday.text.toString()
                            shopTimingList[5].StartTime =
                                binding.atlShopTimingOpenTimeFriday.text.toString()
                            shopTimingList[6].StartTime =
                                binding.atlShopTimingOpenTimeSaturday.text.toString()

                            shopTimingList[0].EndTime =
                                binding.atlShopTimingCloseTimeSunday.text.toString()
                            shopTimingList[1].EndTime =
                                binding.atlShopTimingCloseTimeMonday.text.toString()
                            shopTimingList[2].EndTime =
                                binding.atlShopTimingCloseTimeTuesday.text.toString()
                            shopTimingList[3].EndTime =
                                binding.atlShopTimingCloseTimeWednesday.text.toString()
                            shopTimingList[4].EndTime =
                                binding.atlShopTimingCloseTimeThursday.text.toString()
                            shopTimingList[5].EndTime =
                                binding.atlShopTimingCloseTimeFriday.text.toString()
                            shopTimingList[6].EndTime =
                                binding.atlShopTimingCloseTimeSaturday.text.toString()

                            displayShopTiming()
                            Toast.makeText(
                                requireContext(),
                                requireContext().resources.getString(R.string.update_successfully),
                                Toast.LENGTH_LONG
                            ).show()
                        }
                    }
                }
            }
        }
    }

    private fun callUpdateRacketStateMonthValue(context: Context) {
        viewModelNew.updateRacketStateChangeValue(
            getPreference(context, "shopTokenId"),
            getPreference(context, "shopId").toInt(), racketStateChangeUpdateBody
        ).observe(viewLifecycleOwner) {
            it?.let { response ->
                when (response.status) {
                    Status.ERROR -> {
                        callDefaultRacketStateChangeValue(context)
                    }
                    Status.LOADING -> {
                    }
                    Status.SUCCESS -> {
                        response.data?.let { output ->
//                            btn_racket_state_save.isEnabled = true
                            Toast.makeText(
                                context,
                                context.getString(R.string.update_successfully),
                                Toast.LENGTH_LONG
                            ).show()
                        }
                    }
                }
            }
        }
    }

    private fun callAddShopHolidayFunction(context: Context) {
        viewModelNew.add_ShopHoliday(
            getPreference(context, "shopTokenId"),
            getPreference(context, "shopId").toInt(),
            Add_Holiday_Pojo(
                binding.atlHolidayTitle.text.toString(), holidayDate.toString(),
                getPreference(context, "RoleAssignmentID").toInt(), null
            )
        ).observe(viewLifecycleOwner) {
            when (it.status) {
                Status.LOADING -> {
                    progressDialogShopTimingHoliday_1.show()
                }
                Status.ERROR -> {
                    callAddShopHolidayFunction(requireContext())
                }
                Status.SUCCESS -> {
                    progressDialogShopTimingHoliday_1.dismiss()

                    val response = it.data

                    if (response != null) {
                        if (response.ShopHolidayID != null) {
                            Toast.makeText(
                                context,
                                context.resources.getString(R.string.holiday_added),
                                Toast.LENGTH_LONG
                            ).show()
                            iv_holiday_ok.isEnabled = true
                            holidayDate = null

                            binding.atlHolidayTitle.text = null
                            binding.atlHolidayDate.text = null

                            callShopHolidayListing(
                                getPreference(context, "shopTokenId"),
                                getPreference(context, "shopId").toInt()
                            )
                        }
                    }
                }
            }
        }
    }

    fun callShopHolidayListing(shopTokenId: String, ShopId: Int) {
        if (checkInternetConnection(requireContext())) {
            progressDialogShopTimingHoliday_2.show()
            viewModelShopTimingNHoliday.getShopHolidayList(
                shopTokenId, ShopId
            )
                ?.observe(viewLifecycleOwner) { response ->
                    if (response != null) {
                        holidayListing.clear()
                        holidayListing.addAll(response)
                        displayHolidayListing()

                        progressDialogShopTimingHoliday_2.dismiss()
                    }
                }
        } else
            Toast.makeText(
                requireContext(),
                getString(R.string.no_internet_connection),
                Toast.LENGTH_LONG
            ).show()
    }

    private fun displayHolidayListing() {
        if (checkInternetConnection(requireContext())) {
            v_shop_timing_holiday_view_2.visibility = GONE

            if (holidayListing.size > 0) {
                holidayAdapter = HolidayManagementAdapter(requireContext())

                if (MainActivity.fixedOrientation == 7)
                    ev_holiday_list.layoutManager = LinearLayoutManager(context)
                else
                    ev_holiday_list.layoutManager =
                        GridLayoutManager(context, 2, RecyclerView.VERTICAL, false)

                ev_holiday_list.adapter?.notifyDataSetChanged()
                ev_holiday_list.adapter = holidayAdapter

                tv_no_holiday.visibility = View.GONE
                ev_holiday_list.visibility = View.VISIBLE
            } else {
                tv_no_holiday.visibility = View.VISIBLE
                ev_holiday_list.visibility = View.GONE
            }
        } else
            Toast.makeText(
                requireContext(),
                getString(R.string.no_internet_connection),
                Toast.LENGTH_LONG
            ).show()
    }

    private fun openDialogForTiming(title: String, textview_time: TextView) {
        val picker = NumberPicker(context)
        picker.minValue = 0
        picker.maxValue = timingList.size - 1
        picker.displayedValues = timingList
        picker.descendantFocusability = NumberPicker.FOCUS_BLOCK_DESCENDANTS
        val layout = FrameLayout(requireContext())
        layout.addView(
            picker, FrameLayout.LayoutParams(
                FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT,
                Gravity.CENTER
            )
        )
        picker.value = timingList.indexOf(textview_time.text.toString())

        AlertDialog.Builder(context)
            .setView(layout)
            .setTitle(title)
            .setPositiveButton(
                android.R.string.ok
            ) { dialogInterface: DialogInterface?, i: Int ->
                textview_time.text = timingList[picker.value]
            }
            .setNegativeButton(android.R.string.cancel, null)
            .show()
    }

    private fun displayShopTiming() {
        binding.checkboxSunday.isChecked = shopTimingList[0].IsOpen!!
        binding.checkboxMonday.isChecked = shopTimingList[1].IsOpen!!
        binding.checkboxTuesday.isChecked = shopTimingList[2].IsOpen!!
        binding.checkboxWednesday.isChecked = shopTimingList[3].IsOpen!!
        binding.checkboxThursday.isChecked = shopTimingList[4].IsOpen!!
        binding.checkboxFriday.isChecked = shopTimingList[5].IsOpen!!
        binding.checkboxSaturday.isChecked = shopTimingList[6].IsOpen!!

        binding.atlShopTimingOpenTimeSunday.setText(shopTimingList[0].StartTime)
        binding.atlShopTimingOpenTimeMonday.setText(shopTimingList[1].StartTime)
        binding.atlShopTimingOpenTimeTuesday.setText(shopTimingList[2].StartTime)
        binding.atlShopTimingOpenTimeWednesday.setText(shopTimingList[3].StartTime)
        binding.atlShopTimingOpenTimeThursday.setText(shopTimingList[4].StartTime)
        binding.atlShopTimingOpenTimeFriday.setText(shopTimingList[5].StartTime)
        binding.atlShopTimingOpenTimeSaturday.setText(shopTimingList[6].StartTime)

        binding.atlShopTimingCloseTimeSunday.setText(shopTimingList[0].EndTime)
        binding.atlShopTimingCloseTimeMonday.setText(shopTimingList[1].EndTime)
        binding.atlShopTimingCloseTimeTuesday.setText(shopTimingList[2].EndTime)
        binding.atlShopTimingCloseTimeWednesday.setText(shopTimingList[3].EndTime)
        binding.atlShopTimingCloseTimeThursday.setText(shopTimingList[4].EndTime)
        binding.atlShopTimingCloseTimeFriday.setText(shopTimingList[5].EndTime)
        binding.atlShopTimingCloseTimeSaturday.setText(shopTimingList[6].EndTime)

        v_shop_timing_holiday_view_1.visibility = GONE
        btn_shop_time_charge_timing.isEnabled = true
    }

    private fun callDefaultRacketStateChangeValue(context: Context) {
        if (checkInternetConnection(context)) {
            viewModelNew.getRacketStateChangeValue(
                getPreference(context, "shopTokenId"),
                getPreference(context, "shopId").toInt()
            ).observe(viewLifecycleOwner) {
                it?.let { response ->
                    when (response.status) {
                        Status.ERROR -> {
                            callDefaultRacketStateChangeValue(context)
                        }
                        Status.LOADING -> {
                        }
                        Status.SUCCESS -> {
                            response.data?.let { output ->
                                binding.atlMonthsReminder.setText(output.FrequencyInMonth.toString())
                                racketStateChangeUpdateBody = RacketStateChangeUpdateBody(
                                    output.FrequencyInMonth,
                                    output.RacketStatsFrequencyID,
                                    getPreference(requireContext(), "RoleAssignmentID").toInt()
                                )
                            }
                        }
                    }
                }
            }
        } else
            Toast.makeText(
                context,
                getString(R.string.no_internet_connection),
                Toast.LENGTH_LONG
            ).show()
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setHasOptionsMenu(true)
    }

    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        super.onCreateOptionsMenu(menu, inflater)

        menu.clear()
    }
}
